[
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "flask_limiter",
        "description": "flask_limiter",
        "isExtraImport": true,
        "detail": "flask_limiter",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "flask_limiter.util",
        "description": "flask_limiter.util",
        "isExtraImport": true,
        "detail": "flask_limiter.util",
        "documentation": {}
    },
    {
        "label": "Cache",
        "importPath": "flask_caching",
        "description": "flask_caching",
        "isExtraImport": true,
        "detail": "flask_caching",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_customers",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customers():\n    query = select(Customers)\n    members = db.session.execute(query).scalars().all()\n    return customers_schema.jsonify(members)\n@customers_bp.route('/<int:id>')\ndef get_customer(id):\n    customer = db.session.get(Customers, id)\n    if customer:\n        return customer_schema.jsonify(customer), 200\n    return jsonify({\"error\": \"Customer not found.\"}), 404",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customer(id):\n    customer = db.session.get(Customers, id)\n    if customer:\n        return customer_schema.jsonify(customer), 200\n    return jsonify({\"error\": \"Customer not found.\"}), 404\n@customers_bp.route('', methods=['POST'])\ndef add_customer():\n    from flask import request\n    data = request.get_json()\n    try:",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "add_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def add_customer():\n    from flask import request\n    data = request.get_json()\n    try:\n        customer_data = customer_schema.load(data)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    query = select(Customers).where(Customers.email == customer_data['email']) #Checking our db for a member with this email\n    existing_member = db.session.execute(query).scalars().all()\n    if existing_member:",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "update_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def update_customer(id):\n    customer = db.session.get(Customers, id)\n    if not customer:\n        return jsonify({\"error\": \"Customer not found.\"}), 404\n    try:\n        customer_data = customer_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    for key, value in customer_data.items():\n        setattr(customer, key, value)",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "delete_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def delete_customer(id):    \n    customer = db.session.get(Customers, id)\n    if not customer:\n        return jsonify({\"error\": \"Customer not found.\"}), 404\n    db.session.delete(customer)\n    db.session.commit()\n    return jsonify({\"message\": \"Customer deleted successfully.\"}), 200",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "CustomersSchema",
        "kind": 6,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "class CustomersSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Customers\ncustomer_schema = CustomersSchema()\ncustomers_schema = CustomersSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customer_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customer_schema = CustomersSchema()\ncustomers_schema = CustomersSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customers_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customers_schema = CustomersSchema(many=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "get_mechanics",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanics():   \n    \"\"\"\n    Cached for 60 seconds to reduce DB load for frequent access.\n    \"\"\" \n    query = select(Mechanics)\n    mechanics = db.session.execute(query).scalars().all()\n    return mechanics_schema.jsonify(mechanics)\n@mechanics_bp.route('/<int:id>')\ndef get_mechanic(id):   \n    mechanic = db.session.get(Mechanics, id)",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanic(id):   \n    mechanic = db.session.get(Mechanics, id)\n    if mechanic:\n        return mechanic_schema.jsonify(mechanic), 200\n    return jsonify({\"error\": \"Mechanic not found.\"}), 404\n@mechanics_bp.route('', methods=['POST'])\ndef add_mechanic():\n    from flask import request\n    data = request.get_json()\n    try:",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "add_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def add_mechanic():\n    from flask import request\n    data = request.get_json()\n    try:\n        mechanic_data = mechanic_schema.load(data)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    query = select(Mechanics).where(Mechanics.email == mechanic_data['email']) #Checking our db for a member with this email\n    existing_mechanic = db.session.execute(query).scalars().all()   \n    if existing_mechanic:",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "update_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def update_mechanic(id):\n    mechanic = db.session.get(Mechanics, id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    try:\n        mechanic_data = mechanic_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    for key, value in mechanic_data.items():\n        setattr(mechanic, key, value)",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "delete_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def delete_mechanic(id):\n    mechanic = db.session.get(Mechanics, id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    db.session.delete(mechanic)\n    db.session.commit()\n    return jsonify({\"message\": \"Mechanic deleted successfully.\"}), 200",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "MechanicsSchema",
        "kind": 6,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "class MechanicsSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Mechanics\nmechanic_schema = MechanicsSchema()\nmechanics_schema = MechanicsSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanic_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanic_schema = MechanicsSchema()\nmechanics_schema = MechanicsSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanics_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanics_schema = MechanicsSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "get_tickets",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def get_tickets():\n    \"\"\"\n    Rate limited to 10 requests per minute per IP to prevent abuse.\n    \"\"\"\n    query = select(Tickets)\n    tickets = db.session.execute(query).scalars().all() \n    return tickets_schema.jsonify(tickets)\n@tickets_bp.route('/<int:id>')\ndef get_ticket(id):\n    ticket = db.session.get(Tickets, id)",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def get_ticket(id):\n    ticket = db.session.get(Tickets, id)\n    if ticket:\n        return ticket_schema.jsonify(ticket), 200\n    return jsonify({\"error\": \"Ticket not found.\"}), 404\n@tickets_bp.route('', methods=['POST'])\ndef add_ticket():\n    data = request.get_json()\n    try:\n        ticket_data = ticket_schema.load(data)",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "add_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def add_ticket():\n    data = request.get_json()\n    try:\n        ticket_data = ticket_schema.load(data)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    # Validate customer_id exists\n    customer_id = ticket_data.get(\"customer_id\")\n    customer = db.session.get(Customers, customer_id)\n    if not customer:",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "update_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def update_ticket(id):\n    ticket = db.session.get(Tickets, id)\n    if not ticket:\n        return jsonify({\"error\": \"Ticket not found.\"}), 404\n    try:\n        ticket_data = ticket_schema.load(request.json, partial=True)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    # If customer_id is provided, validate it\n    if \"customer_id\" in ticket_data:",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "assign_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def assign_mechanic(ticket_id, mechanic_id):\n    ticket = db.session.get(Tickets, ticket_id)\n    if not ticket:\n        return jsonify({\"error\": \"Ticket not found.\"}), 404\n    from app.models import Mechanics\n    mechanic = db.session.get(Mechanics, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    if mechanic in ticket.mechanics:\n        return jsonify({\"message\": \"Mechanic already assigned to this ticket.\"}), 200",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "remove_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def remove_mechanic(ticket_id, mechanic_id):\n    ticket = db.session.get(Tickets, ticket_id)\n    if not ticket:\n        return jsonify({\"error\": \"Ticket not found.\"}), 404\n    from app.models import Mechanics\n    mechanic = db.session.get(Mechanics, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    if mechanic not in ticket.mechanics:\n        return jsonify({\"message\": \"Mechanic is not assigned to this ticket.\"}), 200",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "delete_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def delete_ticket(id):  \n    ticket = db.session.get(Tickets, id)\n    if not ticket:\n        return jsonify({\"error\": \"Ticket not found.\"}), 404\n    db.session.delete(ticket)\n    db.session.commit()\n    return jsonify({\"message\": \"Ticket deleted successfully.\"}), 200",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "TicketsSchema",
        "kind": 6,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "class TicketsSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Tickets\n        include_fk = True \nticket_schema = TicketsSchema()\ntickets_schema = TicketsSchema(many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "ticket_schema",
        "kind": 5,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "ticket_schema = TicketsSchema()\ntickets_schema = TicketsSchema(many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "tickets_schema",
        "kind": 5,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "tickets_schema = TicketsSchema(many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "ma = Marshmallow()\nlimiter = Limiter(key_func=get_remote_address)\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})  # Replace with Redis in production",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})  # Replace with Redis in production",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "cache = Cache(config={'CACHE_TYPE': 'SimpleCache'})  # Replace with Redis in production",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\n#Instantiate your SQLAlchemy database\ndb = SQLAlchemy(model_class = Base)\n#========== Models ==========\nservice_mechanics = db.Table(\n    'service_mechanics',\n    Base.metadata,\n    db.Column('mechanic_id', db.ForeignKey('mechanics.id')),\n    db.Column('ticket_id', db.ForeignKey('service_tickets.id'))",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Customers(Base):\n    __tablename__ = 'customers'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(360), nullable=False, unique=True)\n    phone: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    tickets: Mapped[List['Tickets']] = db.relationship(back_populates='customer')\nclass Tickets(Base):\n    __tablename__ = 'service_tickets'\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Tickets(Base):\n    __tablename__ = 'service_tickets'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    VIN: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    service_date: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    service_desc: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    customer_id: Mapped[int] = mapped_column(db.ForeignKey('customers.id'))\n    customer: Mapped['Customers'] = db.relationship(back_populates='tickets')\n    mechanics: Mapped[List['Mechanics']] = db.relationship(secondary=service_mechanics, back_populates='tickets')\nclass Mechanics(Base):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Mechanics(Base):\n    __tablename__ = \"mechanics\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(360), nullable=False, unique=True)\n    phone: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    salary: Mapped[float] = mapped_column(db.Float, nullable=False)\n    tickets: Mapped[List['Tickets']] = db.relationship(secondary=service_mechanics, back_populates='mechanics')\n#========== End of Models ==========",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "db = SQLAlchemy(model_class = Base)\n#========== Models ==========\nservice_mechanics = db.Table(\n    'service_mechanics',\n    Base.metadata,\n    db.Column('mechanic_id', db.ForeignKey('mechanics.id')),\n    db.Column('ticket_id', db.ForeignKey('service_tickets.id'))\n)\nclass Customers(Base):\n    __tablename__ = 'customers'",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "service_mechanics",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "service_mechanics = db.Table(\n    'service_mechanics',\n    Base.metadata,\n    db.Column('mechanic_id', db.ForeignKey('mechanics.id')),\n    db.Column('ticket_id', db.ForeignKey('service_tickets.id'))\n)\nclass Customers(Base):\n    __tablename__ = 'customers'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = create_app('DevelopmentConfig') \n# Create the table\nwith app.app_context():\n\tdb.create_all()\napp.run()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelopmentConfig:\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'mysql+mysqlconnector://root:11Oval11@localhost/mydatabase'\nclass ProductionConfig:\n    pass\nclass TestingConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ProductionConfig:\n    pass\nclass TestingConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "TestingConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class TestingConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    }
]