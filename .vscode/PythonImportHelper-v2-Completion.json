[
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "service_mechanics",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TicketInventory",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "importPath": "app.utils.util",
        "description": "app.utils.util",
        "isExtraImport": true,
        "detail": "app.utils.util",
        "documentation": {}
    },
    {
        "label": "token_required",
        "importPath": "app.utils.util",
        "description": "app.utils.util",
        "isExtraImport": true,
        "detail": "app.utils.util",
        "documentation": {}
    },
    {
        "label": "token_required",
        "importPath": "app.utils.util",
        "description": "app.utils.util",
        "isExtraImport": true,
        "detail": "app.utils.util",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "flask_limiter",
        "description": "flask_limiter",
        "isExtraImport": true,
        "detail": "flask_limiter",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "flask_limiter.util",
        "description": "flask_limiter.util",
        "isExtraImport": true,
        "detail": "flask_limiter.util",
        "documentation": {}
    },
    {
        "label": "Cache",
        "importPath": "flask_caching",
        "description": "flask_caching",
        "isExtraImport": true,
        "detail": "flask_caching",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def login():\n    try:\n        data = login_schema.load(request.get_json())\n    except Exception as err:\n        return jsonify(err.messages), 400\n    customer = db.session.execute(\n        select(Customers).filter_by(email=data['email'])\n    ).scalars().first()\n    if not customer or not customer.check_password(data['password']):\n        return jsonify({\"error\": \"Invalid credentials\"}), 401",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customers",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customers():\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    stmt = select(Customers).order_by(Customers.name)\n    pagination = db.paginate(stmt, page=page, per_page=per_page, error_out=False)\n    return jsonify({\n        \"customers\": customers_schema.dump(pagination.items),\n        \"total\": pagination.total,\n        \"page\": pagination.page,\n        \"pages\": pagination.pages",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "get_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def get_customer(customer_id, id):\n    if int(customer_id) != id:\n        return jsonify({\"error\": \"Unauthorized\"}), 403\n    customer = db.session.get(Customers, id)\n    if customer:\n        return customer_schema.jsonify(customer), 200\n    return jsonify({\"error\": \"Customer not found.\"}), 404\n@customers_bp.route('', methods=['POST'])\ndef add_customer():\n    data = request.get_json()",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "add_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def add_customer():\n    data = request.get_json()\n    try:\n        customer_data = customer_schema.load(data)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    # Check if email already exists\n    query = select(Customers).where(Customers.email == customer_data['email'])\n    existing_member = db.session.execute(query).scalars().first()\n    if existing_member:",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "update_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def update_customer(customer_id, id):\n    if int(customer_id) != id:\n        return jsonify({\"error\": f'Unauthorized {id}'}), 403\n    customer = db.session.get(Customers, id)\n    if not customer:\n        return jsonify({\"error\": \"Customer not found.\"}), 404\n    try:\n        customer_data = customer_schema.load(request.json, partial=True)\n    except ValidationError as e:\n        return jsonify(e.messages), 400",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "delete_customer",
        "kind": 2,
        "importPath": "app.blueprints.customers.routes",
        "description": "app.blueprints.customers.routes",
        "peekOfCode": "def delete_customer(customer_id, id):\n    if int(customer_id) != id:\n        return jsonify({\"error\": \"Unauthorized\"}), 403\n    customer = db.session.get(Customers, id)\n    if not customer:\n        return jsonify({\"error\": \"Customer not found.\"}), 404\n    db.session.delete(customer)\n    db.session.commit()\n    return jsonify({\"message\": \"Customer deleted successfully.\"}), 200",
        "detail": "app.blueprints.customers.routes",
        "documentation": {}
    },
    {
        "label": "CustomersSchema",
        "kind": 6,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "class CustomersSchema(ma.SQLAlchemyAutoSchema):\n    password = fields.String(required=True, load_only=True)  # required, write-only\n    class Meta:\n        model = Customers\n        exclude = (\"password_hash\",)  # still exclude this from output\ncustomer_schema = CustomersSchema()\ncustomers_schema = CustomersSchema(many=True)\nclass LoginSchema(ma.Schema):\n    email = fields.Email(required=True)\n    password = fields.String(required=True)",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "LoginSchema",
        "kind": 6,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "class LoginSchema(ma.Schema):\n    email = fields.Email(required=True)\n    password = fields.String(required=True)\nlogin_schema = LoginSchema()",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customer_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customer_schema = CustomersSchema()\ncustomers_schema = CustomersSchema(many=True)\nclass LoginSchema(ma.Schema):\n    email = fields.Email(required=True)\n    password = fields.String(required=True)\nlogin_schema = LoginSchema()",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "customers_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "customers_schema = CustomersSchema(many=True)\nclass LoginSchema(ma.Schema):\n    email = fields.Email(required=True)\n    password = fields.String(required=True)\nlogin_schema = LoginSchema()",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "login_schema",
        "kind": 5,
        "importPath": "app.blueprints.customers.schemas",
        "description": "app.blueprints.customers.schemas",
        "peekOfCode": "login_schema = LoginSchema()",
        "detail": "app.blueprints.customers.schemas",
        "documentation": {}
    },
    {
        "label": "get_inventory",
        "kind": 2,
        "importPath": "app.blueprints.inventory.routes",
        "description": "app.blueprints.inventory.routes",
        "peekOfCode": "def get_inventory():\n    stmt = select(Inventory)\n    items = db.session.execute(stmt).scalars().all()\n    return inventories_schema.jsonify(items)\n@inventory_bp.route('/<int:id>', methods=['GET'])\ndef get_item(id):\n    item = db.session.get(Inventory, id)\n    if item:\n        return inventory_schema.jsonify(item)\n    return jsonify({\"error\": \"Item not found.\"}), 404",
        "detail": "app.blueprints.inventory.routes",
        "documentation": {}
    },
    {
        "label": "get_item",
        "kind": 2,
        "importPath": "app.blueprints.inventory.routes",
        "description": "app.blueprints.inventory.routes",
        "peekOfCode": "def get_item(id):\n    item = db.session.get(Inventory, id)\n    if item:\n        return inventory_schema.jsonify(item)\n    return jsonify({\"error\": \"Item not found.\"}), 404\n@inventory_bp.route('', methods=['POST'])\ndef add_item():\n    try:\n        data = inventory_schema.load(request.get_json())\n    except ValidationError as err:",
        "detail": "app.blueprints.inventory.routes",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "app.blueprints.inventory.routes",
        "description": "app.blueprints.inventory.routes",
        "peekOfCode": "def add_item():\n    try:\n        data = inventory_schema.load(request.get_json())\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    item = Inventory(**data)\n    db.session.add(item)\n    db.session.commit()\n    return inventory_schema.jsonify(item), 201\n@inventory_bp.route('/<int:id>', methods=['PUT'])",
        "detail": "app.blueprints.inventory.routes",
        "documentation": {}
    },
    {
        "label": "update_item",
        "kind": 2,
        "importPath": "app.blueprints.inventory.routes",
        "description": "app.blueprints.inventory.routes",
        "peekOfCode": "def update_item(id):\n    item = db.session.get(Inventory, id)\n    if not item:\n        return jsonify({\"error\": \"Item not found.\"}), 404\n    try:\n        data = inventory_schema.load(request.get_json(), partial=True)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    for key, value in data.items():\n        setattr(item, key, value)",
        "detail": "app.blueprints.inventory.routes",
        "documentation": {}
    },
    {
        "label": "delete_item",
        "kind": 2,
        "importPath": "app.blueprints.inventory.routes",
        "description": "app.blueprints.inventory.routes",
        "peekOfCode": "def delete_item(id):\n    item = db.session.get(Inventory, id)\n    if not item:\n        return jsonify({\"error\": \"Item not found.\"}), 404\n    db.session.delete(item)\n    db.session.commit()\n    return jsonify({\"message\": \"Item deleted.\"}), 200",
        "detail": "app.blueprints.inventory.routes",
        "documentation": {}
    },
    {
        "label": "TicketBriefSchema",
        "kind": 6,
        "importPath": "app.blueprints.inventory.schemas",
        "description": "app.blueprints.inventory.schemas",
        "peekOfCode": "class TicketBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Tickets\n        include_fk = True\n        fields = ('id', 'VIN', 'service_date', 'service_desc')\nclass InventorySchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Inventory\n        include_relationships = True\n    tickets = fields.Nested(TicketBriefSchema, many=True)",
        "detail": "app.blueprints.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "InventorySchema",
        "kind": 6,
        "importPath": "app.blueprints.inventory.schemas",
        "description": "app.blueprints.inventory.schemas",
        "peekOfCode": "class InventorySchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Inventory\n        include_relationships = True\n    tickets = fields.Nested(TicketBriefSchema, many=True)\ninventory_schema = InventorySchema()\ninventories_schema = InventorySchema(many=True)",
        "detail": "app.blueprints.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "inventory_schema",
        "kind": 5,
        "importPath": "app.blueprints.inventory.schemas",
        "description": "app.blueprints.inventory.schemas",
        "peekOfCode": "inventory_schema = InventorySchema()\ninventories_schema = InventorySchema(many=True)",
        "detail": "app.blueprints.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "inventories_schema",
        "kind": 5,
        "importPath": "app.blueprints.inventory.schemas",
        "description": "app.blueprints.inventory.schemas",
        "peekOfCode": "inventories_schema = InventorySchema(many=True)",
        "detail": "app.blueprints.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "most_active_mechanics",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def most_active_mechanics():\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    stmt = (\n        db.session.query(Mechanics, func.count(service_mechanics.c.ticket_id).label('ticket_count'))\n        .join(service_mechanics)\n        .group_by(Mechanics.id)\n        .order_by(func.count(service_mechanics.c.ticket_id).desc())\n    )\n    pagination = stmt.paginate(page=page, per_page=per_page, error_out=False)",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanics",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanics():   \n    \"\"\"\n    Cached for 60 seconds to reduce DB load for frequent access.\n    \"\"\" \n    query = select(Mechanics)\n    mechanics = db.session.execute(query).scalars().all()\n    return mechanics_schema.jsonify(mechanics)\n@mechanics_bp.route('/<int:id>')\ndef get_mechanic(id):   \n    mechanic = db.session.get(Mechanics, id)",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "get_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def get_mechanic(id):   \n    mechanic = db.session.get(Mechanics, id)\n    if mechanic:\n        return mechanic_schema.jsonify(mechanic), 200\n    return jsonify({\"error\": \"Mechanic not found.\"}), 404\n@mechanics_bp.route('', methods=['POST'])\ndef add_mechanic():\n    from flask import request\n    data = request.get_json()\n    try:",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "add_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def add_mechanic():\n    from flask import request\n    data = request.get_json()\n    try:\n        mechanic_data = mechanic_schema.load(data)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    query = select(Mechanics).where(Mechanics.email == mechanic_data['email']) #Checking our db for a member with this email\n    existing_mechanic = db.session.execute(query).scalars().all()   \n    if existing_mechanic:",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "update_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def update_mechanic(id):\n    mechanic = db.session.get(Mechanics, id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    try:\n        mechanic_data = mechanic_schema.load(request.json)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    for key, value in mechanic_data.items():\n        setattr(mechanic, key, value)",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "delete_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.mechanics.routes",
        "description": "app.blueprints.mechanics.routes",
        "peekOfCode": "def delete_mechanic(id):\n    mechanic = db.session.get(Mechanics, id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    db.session.delete(mechanic)\n    db.session.commit()\n    return jsonify({\"message\": \"Mechanic deleted successfully.\"}), 200",
        "detail": "app.blueprints.mechanics.routes",
        "documentation": {}
    },
    {
        "label": "MechanicsSchema",
        "kind": 6,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "class MechanicsSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Mechanics\nmechanic_schema = MechanicsSchema()\nmechanics_schema = MechanicsSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanic_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanic_schema = MechanicsSchema()\nmechanics_schema = MechanicsSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "mechanics_schema",
        "kind": 5,
        "importPath": "app.blueprints.mechanics.schemas",
        "description": "app.blueprints.mechanics.schemas",
        "peekOfCode": "mechanics_schema = MechanicsSchema(many=True)",
        "detail": "app.blueprints.mechanics.schemas",
        "documentation": {}
    },
    {
        "label": "get_tickets",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def get_tickets():\n    \"\"\"\n    Public: Rate limited to 10 requests per minute per IP.\n    \"\"\"\n    query = select(Tickets)\n    tickets = db.session.execute(query).scalars().all() \n    return tickets_schema.jsonify(tickets)\n@tickets_bp.route('/<int:id>')\n@token_required\ndef get_ticket(customer_id, id):",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def get_ticket(customer_id, id):\n    ticket = db.session.get(Tickets, id)\n    if not ticket or ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"Unauthorized access or ticket not found.\"}), 403\n    return ticket_schema.jsonify(ticket), 200\n@tickets_bp.route('', methods=['POST'])\n@token_required\ndef add_ticket(customer_id):\n    data = request.get_json()\n    try:",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "add_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def add_ticket(customer_id):\n    data = request.get_json()\n    try:\n        ticket_data = ticket_schema.load(data)\n    except ValidationError as err:\n        return {\"errors\": err.messages}, 400\n    # Ensure ticket is created only for the authenticated customer\n    if ticket_data.get(\"customer_id\") != int(customer_id):\n        return jsonify({\"error\": \"Cannot create ticket for another customer.\"}), 403\n    customer = db.session.get(Customers, customer_id)",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "update_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def update_ticket(customer_id, id):\n    ticket = db.session.get(Tickets, id)\n    if not ticket or ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"Unauthorized or ticket not found.\"}), 403\n    try:\n        ticket_data = ticket_schema.load(request.json, partial=True)\n    except ValidationError as e:\n        return jsonify(e.messages), 400\n    # Optional customer_id change check\n    if \"customer_id\" in ticket_data and ticket_data[\"customer_id\"] != int(customer_id):",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "assign_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def assign_mechanic(customer_id, ticket_id, mechanic_id):\n    ticket = db.session.get(Tickets, ticket_id)\n    if not ticket or ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"Unauthorized or ticket not found.\"}), 403\n    from app.models import Mechanics\n    mechanic = db.session.get(Mechanics, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    if mechanic in ticket.mechanics:\n        return jsonify({\"message\": \"Mechanic already assigned.\"}), 200",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "remove_mechanic",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def remove_mechanic(customer_id, ticket_id, mechanic_id):\n    ticket = db.session.get(Tickets, ticket_id)\n    if not ticket or ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"Unauthorized or ticket not found.\"}), 403\n    from app.models import Mechanics\n    mechanic = db.session.get(Mechanics, mechanic_id)\n    if not mechanic:\n        return jsonify({\"error\": \"Mechanic not found.\"}), 404\n    if mechanic not in ticket.mechanics:\n        return jsonify({\"message\": \"Mechanic is not assigned.\"}), 200",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "delete_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def delete_ticket(customer_id, id):\n    ticket = db.session.get(Tickets, id)\n    if not ticket or ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"Unauthorized or ticket not found.\"}), 403\n    db.session.delete(ticket)\n    db.session.commit()\n    return jsonify({\"message\": \"Ticket deleted successfully.\"}), 200\n@tickets_bp.route('/my-tickets', methods=['GET'])\n@token_required\ndef get_my_tickets(customer_id):",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "get_my_tickets",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def get_my_tickets(customer_id):\n    \"\"\"\n    Returns all service tickets associated with the authenticated customer.\n    Requires Bearer token.\n    \"\"\"\n    query = select(Tickets).where(Tickets.customer_id == int(customer_id))\n    tickets = db.session.execute(query).scalars().all()\n    return tickets_schema.jsonify(tickets), 200\n@tickets_bp.route('/<int:ticket_id>/edit', methods=['PUT'])\n@token_required",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "edit_ticket_mechanics",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def edit_ticket_mechanics(customer_id, ticket_id):\n    data = request.get_json()\n    add_ids = data.get('add_ids', [])\n    remove_ids = data.get('remove_ids', [])\n    ticket = db.session.get(Tickets, ticket_id)\n    if not ticket:\n        return jsonify({\"error\": \"Ticket not found.\"}), 404\n    # ✅ Ensure this ticket belongs to the authenticated customer\n    if ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"You do not have permission to modify this ticket.\"}), 403",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "add_part_to_ticket",
        "kind": 2,
        "importPath": "app.blueprints.tickets.routes",
        "description": "app.blueprints.tickets.routes",
        "peekOfCode": "def add_part_to_ticket(customer_id, ticket_id, inventory_id):\n    ticket = db.session.get(Tickets, ticket_id)\n    if not ticket or ticket.customer_id != int(customer_id):\n        return jsonify({\"error\": \"Ticket not found or access denied.\"}), 404\n    part = db.session.get(Inventory, inventory_id)\n    if not part:\n        return jsonify({\"error\": \"Part not found.\"}), 404\n    # check if already exists in junction\n    existing = db.session.query(TicketInventory).filter_by(ticket_id=ticket_id, inventory_id=inventory_id).first()\n    if existing:",
        "detail": "app.blueprints.tickets.routes",
        "documentation": {}
    },
    {
        "label": "InventoryBriefSchema",
        "kind": 6,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "class InventoryBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Inventory\n        fields = (\"id\", \"name\", \"price\")\nclass MechanicBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Mechanics\n        fields = (\"id\", \"name\", \"email\", \"phone\")\nclass CustomerBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "MechanicBriefSchema",
        "kind": 6,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "class MechanicBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Mechanics\n        fields = (\"id\", \"name\", \"email\", \"phone\")\nclass CustomerBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Customers\n        fields = (\"id\", \"name\", \"email\", \"phone\")\nclass TicketsSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "CustomerBriefSchema",
        "kind": 6,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "class CustomerBriefSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Customers\n        fields = (\"id\", \"name\", \"email\", \"phone\")\nclass TicketsSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Tickets\n        include_relationships = True\n    parts = fields.Nested(InventoryBriefSchema, many=True)\n    mechanics = fields.Nested(MechanicBriefSchema, many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "TicketsSchema",
        "kind": 6,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "class TicketsSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = Tickets\n        include_relationships = True\n    parts = fields.Nested(InventoryBriefSchema, many=True)\n    mechanics = fields.Nested(MechanicBriefSchema, many=True)\n    customer = fields.Nested(CustomerBriefSchema)\nticket_schema = TicketsSchema()\ntickets_schema = TicketsSchema(many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "ticket_schema",
        "kind": 5,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "ticket_schema = TicketsSchema()\ntickets_schema = TicketsSchema(many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "tickets_schema",
        "kind": 5,
        "importPath": "app.blueprints.tickets.schemas",
        "description": "app.blueprints.tickets.schemas",
        "peekOfCode": "tickets_schema = TicketsSchema(many=True)",
        "detail": "app.blueprints.tickets.schemas",
        "documentation": {}
    },
    {
        "label": "encode_token",
        "kind": 2,
        "importPath": "app.utils.util",
        "description": "app.utils.util",
        "peekOfCode": "def encode_token(customer_id):\n    payload = {\n        'exp': datetime.now(timezone.utc) + timedelta(hours=1),\n        'iat': datetime.now(timezone.utc),\n        'sub': str(customer_id)\n    }\n    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')\ndef token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):",
        "detail": "app.utils.util",
        "documentation": {}
    },
    {
        "label": "token_required",
        "kind": 2,
        "importPath": "app.utils.util",
        "description": "app.utils.util",
        "peekOfCode": "def token_required(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        auth = request.headers.get('Authorization', '')\n        if not auth.startswith('Bearer '):\n            return jsonify({\"error\": \"Missing or invalid token\"}), 401\n        token = auth.split()[1]\n        try:\n            payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n            customer_id = payload['sub']",
        "detail": "app.utils.util",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "ma = Marshmallow()\nlimiter = Limiter(key_func=get_remote_address)\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})  # Replace with Redis in production\nSECRET_KEY = \"a super secret, secret key\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\ncache = Cache(config={'CACHE_TYPE': 'SimpleCache'})  # Replace with Redis in production\nSECRET_KEY = \"a super secret, secret key\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "cache = Cache(config={'CACHE_TYPE': 'SimpleCache'})  # Replace with Redis in production\nSECRET_KEY = \"a super secret, secret key\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.extensions",
        "description": "app.extensions",
        "peekOfCode": "SECRET_KEY = \"a super secret, secret key\"",
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\n#Instantiate your SQLAlchemy database\ndb = SQLAlchemy(model_class = Base)\n#========== Models ==========\nservice_mechanics = db.Table(\n    'service_mechanics',\n    Base.metadata,\n    db.Column('mechanic_id', db.ForeignKey('mechanics.id')),\n    db.Column('ticket_id', db.ForeignKey('service_tickets.id'))",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Customers",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Customers(Base):\n    __tablename__ = 'customers'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(360), nullable=False, unique=True)\n    phone: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    password_hash: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    tickets: Mapped[List['Tickets']] = db.relationship(back_populates='customer')\n    def set_password(self, password: str):\n        \"\"\"Hashes the plaintext password and stores it.\"\"\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Tickets",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Tickets(Base):\n    __tablename__ = 'service_tickets'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    VIN: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    service_date: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    service_desc: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    customer_id: Mapped[int] = mapped_column(db.ForeignKey('customers.id'))\n    parts = relationship('Inventory', secondary='ticket_inventory', back_populates='tickets')\n    customer: Mapped['Customers'] = db.relationship(back_populates='tickets')\n    mechanics: Mapped[List['Mechanics']] = db.relationship(secondary=service_mechanics, back_populates='tickets')",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mechanics",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Mechanics(Base):\n    __tablename__ = \"mechanics\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    email: Mapped[str] = mapped_column(db.String(360), nullable=False, unique=True)\n    phone: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    salary: Mapped[float] = mapped_column(db.Float, nullable=False)\n    tickets: Mapped[List['Tickets']] = db.relationship(secondary=service_mechanics, back_populates='mechanics')\nclass TicketInventory(db.Model):\n    __tablename__ = 'ticket_inventory'",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TicketInventory",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class TicketInventory(db.Model):\n    __tablename__ = 'ticket_inventory'\n    ticket_id = db.Column(db.Integer, db.ForeignKey('service_tickets.id'), primary_key=True)\n    inventory_id = db.Column(db.Integer, db.ForeignKey('inventory.id'), primary_key=True)\n    quantity = db.Column(db.Integer, nullable=False, default=1)\nclass Inventory(Base):\n    __tablename__ = 'inventory'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    price: Mapped[float] = mapped_column(db.Float, nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Inventory(Base):\n    __tablename__ = 'inventory'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    price: Mapped[float] = mapped_column(db.Float, nullable=False)\n    tickets = relationship('Tickets', secondary='ticket_inventory', back_populates='parts')\n#========== End of Models ==========",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "db = SQLAlchemy(model_class = Base)\n#========== Models ==========\nservice_mechanics = db.Table(\n    'service_mechanics',\n    Base.metadata,\n    db.Column('mechanic_id', db.ForeignKey('mechanics.id')),\n    db.Column('ticket_id', db.ForeignKey('service_tickets.id'))\n)\nclass Customers(Base):\n    __tablename__ = 'customers'",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "service_mechanics",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "service_mechanics = db.Table(\n    'service_mechanics',\n    Base.metadata,\n    db.Column('mechanic_id', db.ForeignKey('mechanics.id')),\n    db.Column('ticket_id', db.ForeignKey('service_tickets.id'))\n)\nclass Customers(Base):\n    __tablename__ = 'customers'\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(255), nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = create_app('DevelopmentConfig') \n# Create the table\nwith app.app_context():\n\tdb.create_all()\napp.run()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelopmentConfig:\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'mysql+mysqlconnector://root:11Oval11@localhost/mydatabase'\nclass ProductionConfig:\n    pass\nclass TestingConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class ProductionConfig:\n    pass\nclass TestingConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "TestingConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class TestingConfig:\n    pass",
        "detail": "config",
        "documentation": {}
    }
]